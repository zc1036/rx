
(struct foo
        (feh i32)
        (fehp i32))

(struct fefefe
        (myfoo foo))

(function fef ((a (* (const i32))) (b (* i32))) i32
          (= (* b) (* a)))

(function asdf () i32
          (let asdf (* (-> (* (const i32)) (* i32) i32)) (& fef))

          (= asdf (& fef)))

(function a ((blah (const foo))) i32
          (- [blah'fehp] (bxor 4 5))

          (= [blah'fehp] 3)

          (let foop i32 0)

          (= foop 1)

          (while 0
                 1)

          (let str [ (const char) 3 ]  "hi")

          (if 1
              (block 2 3 4)
              3))

(struct foo2
  (blix i32)
  (gerp [i32 30]))

RX::EOF

(template ((T K V) (move* T) (map* K V))
  (enum maybe
    (just T)
    (nothing)))


(function hi ((blah i32)) i32

  (let ((var 1))
    var)

  (match (just 4)
    (nothing 49)
    ((just y) y))


  (hi (+ blah 1) 1 3)
  (return (+ (- 1 2 3) blah)))
